---
import SelectAction from "@/components/SelectAction.astro";
import ArrowDown from "@/icons/ArrowDown.astro";
import ArrowUp from "@/icons/ArrowUp.astro";
import CornerDownLeft from "@/icons/CornerDownLeft.astro";
import GitHub from "@/icons/GitHub.astro";
import LinkedIn from "@/icons/LinkedIn.astro";
import Printer from "@/icons/Printer.astro";
import X from "@/icons/X.astro";

import { basics } from "@/cv";
const { profiles } = basics;

const SOCIAL_ICONS: any = {
  LinkedIn,
  GitHub,
  X,
};
---

<footer class="no-print">
  Pulsa <kbd>ctrl</kbd> + <kbd>K</kbd> para abrir la paleta de comandos.
</footer>

<dialog class="modal">
  <section>
    <header>
      <label for="">
        <input class="search" type="text" placeholder="Buscar comando" />
      </label>
    </header>
    <main>
      <article>
        <div>
          <p class="title-select">acciones</p>
          <SelectAction
            className="select-item"
            action="Imprimir"
            hotkey="p"
            selected
          >
            <Printer slot="icon" width="24" height="24" />
          </SelectAction>
        </div>
        <div>
          <p class="title-select">Enlaces</p>
          {
            profiles.map(({ network, url }) => {
              const Icons = SOCIAL_ICONS[network];
              const firstLetter = network[0].toUpperCase();
              return (
                <SelectAction
                  className="select-item"
                  action={`Visitar ${network}`}
                  hotkey={firstLetter}
                  url={url}
                >
                  <Icons slot="icon" width="24" height="24" />
                </SelectAction>
              );
            })
          }
        </div>
      </article>
    </main>
    <footer>
      <span>
        <CornerDownLeft className="key-icon" width="14" height="14" />
        seleccionar
      </span>
      <span>
        <ArrowDown className="key-icon" width="14" height="14" />
        <ArrowUp className="key-icon" width="14" height="14" />
        navegar
      </span>
      <span><span class="esc">esc</span>cerrar</span>
    </footer>
  </section>
</dialog>

<style>
  .no-print {
    font-weight: 400;
    background: #fff;
    color: #030712;
    border-top: 0.063rem solid #eee;
    position: fixed;
    bottom: 0;
    width: 100%;
    padding: 2rem 1.5rem;
    display: none;
    font-size: 16px;

    view-timeline-name: --revealing;
    view-timeline-axis: block;

    animation: linear 0.3s fadeIn;
    animation-timeline: --revealing;
    animation-range: entry 100% cover 10%;
  }

  dialog {
    position: fixed;
    width: 100%;
    height: 100%;
    left: 0;
    top: 0;
    background-color: transparent;
    border: none;
  }

  dialog::backdrop {
    background-color: rgba(255, 255, 255, 0.5);
  }

  section {
    position: relative;
    font-family: "Monaspace Argon";
    max-width: 595px;
    margin: auto;
    top: 20%;
    background-color: #fff;
    border-radius: 0.5rem;
    box-shadow: rgb(0 0 0 / 50%) 0px 16px 70px;
  }

  input {
    width: 100%;
    border-bottom: 1px solid rgb(239, 241, 244);
    border-top: none;
    border-inline: none;
    border-radius: 0.5rem;
    padding: 1.25rem;
    font-size: 1.125rem;
    font-weight: 500;
    outline: none;
    color: #b2b2b2;
  }

  input::placeholder {
    color: #b2b2b2;
  }

  main {
    padding: 0.5rem 0;
  }

  .title-select {
    padding: 0.5rem 1rem;
    font-size: 0.75rem;
    font-weight: 600;
    color: #b2b2b2;
  }

  footer {
    border-top: 1px solid rgb(239, 241, 244);
    padding: 0.5rem 1rem;
    font-size: 12px;
    display: flex;
    gap: 1.5rem;
    align-items: center;

    & span {
      display: flex;
      gap: 0.5rem;
      color: #6b6f76;
      font-weight: 400;
    }
  }

  .esc {
    background-color: rgb(239, 241, 244);
    padding: 0.06rem 0.25rem;
    border-radius: 0.25rem;
    font-weight: 500;
  }

  kbd {
    font-family: "Monaspace Argon";
    background-color: #f1f1f1;
    color: #030712;
    border-radius: 0.25rem;
    padding: 0.2rem 0.6rem;
    font-size: 0.75rem;
    font-weight: 900;
  }

  @media (min-width: 640px) {
    .no-print {
      padding: 2rem 4rem;
      text-align: center;
      display: block;
    }
  }

  @media print {
    .no-print {
      display: none !important;
    }
  }

  @keyframes fadeIn {
    from {
      opacity: 0;
    }
    to {
      opacity: 1;
    }
  }
</style>

<style is:global>
  [aria-selected="true"] {
    border-left: 2px solid rgb(110, 94, 210) !important;
    background-color: rgb(248, 249, 251);
  }

  .key-icon {
    background-color: rgb(239, 241, 244);
    border-radius: 0.25rem;
    color: #6b6f76;
    stroke-width: 0.14rem;
    padding: 0.1rem;
  }

  .filter {
    visibility: hidden;
    position: fixed;
    opacity: 0;
    height: 0;
  }
</style>

<script>
  const d = document;
  const dialog = d.querySelector(".modal") as HTMLDialogElement;
  const links = d.querySelectorAll(".select-item");

  dialog.addEventListener("click", (e) => {
    const target = e.target;
    if (target === dialog) dialog.close();
  });

  d.addEventListener("keydown", (e) => {
    const key = e.key;
    const ctrlKey = e.ctrlKey;

    if (ctrlKey && key === "k") {
      e.preventDefault();
      dialog.showModal();
    }
  });

  // Search
  d.addEventListener("keyup", (e) => {
    const target = e.target as HTMLInputElement;
    if (target.matches(".search")) {
      d.querySelectorAll(".select-item").forEach((item) => {
        const itemText = item.textContent?.toLowerCase();
        const targetValue = target.value.toLowerCase();

        itemText?.includes(targetValue)
          ? item.classList.remove("filter")
          : item.classList.add("filter");
      });
    }
  });

  // Select item
  let selectIndex = 0;
  function selectItem(index: number) {
    links.forEach((link) => {
      link.setAttribute("aria-selected", "false");
    });

    selectIndex = index;
    links[index].setAttribute("aria-selected", "true");
  }

  d.addEventListener("keydown", (e) => {
    const subtract = links.length - 1;
    const key = e.key;

    if (key === "ArrowDown") {
      e.preventDefault();
      const operator = selectIndex === subtract ? 0 : ++selectIndex;
      selectItem((selectIndex = operator));
    }

    if (key === "ArrowUp") {
      e.preventDefault();
      const operator = selectIndex === 0 ? subtract : --selectIndex;
      selectItem((selectIndex = operator));
    }

    links.forEach((link, index) => {
      link.addEventListener("mouseover", () => {
        selectItem(index);
      });
    });
  });
</script>
